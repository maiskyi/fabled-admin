/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Developer API
 * OpenAPI spec version: 2.0.0
 */
import { instance } from "../instance/index";
import type { BodyType } from "../instance/index";
import type {
  App,
  AppCreate,
  AttachProductsToEntitlementBody,
  AttachProductsToPackageBody,
  CreateCustomerBody,
  CreateEntitlementBody,
  CreateOfferingBody,
  CreatePackagesBody,
  CreateProductBody,
  Customer,
  DeletedObject,
  DetachProductsFromEntitlementBody,
  DetachProductsFromPackageBody,
  Entitlement,
  GetEntitlementParams,
  GetOfferingParams,
  GetPackageParams,
  GetProductParams,
  GetProductsFromEntitlementParams,
  GetProductsFromPackageParams,
  ListApps,
  ListAppsParams,
  ListCustomerActiveEntitlements,
  ListCustomerActiveEntitlementsParams,
  ListCustomerAliases,
  ListCustomerAliasesParams,
  ListCustomerInvoices,
  ListCustomerInvoicesParams,
  ListCustomers,
  ListCustomersParams,
  ListEntitlements,
  ListEntitlementsParams,
  ListOfferings,
  ListOfferingsParams,
  ListPackages,
  ListPackagesParams,
  ListProducts,
  ListProductsParams,
  ListProjects,
  ListProjectsParams,
  ListPurchaseEntitlementsParams,
  ListPurchases,
  ListPurchasesParams,
  ListSubscriptionEntitlementsParams,
  ListSubscriptions,
  ListSubscriptionsParams,
  Offering,
  OverviewMetrics,
  Package,
  Product,
  ProductsFromEntitlement,
  ProductsFromPackage,
  Purchase,
  Subscription,
  UpdateAppBody,
  UpdateEntitlementBody,
  UpdateOfferingBody,
  UpdatePackageBody,
} from "./revenuecat.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * This endpoint requires the following permission(s): <code>project_configuration:projects:read</code>.
 * @summary Get a list of projects
 */
export const listProjects = (
  params?: ListProjectsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListProjects>(
    { url: "/projects", method: "GET", params },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
 * @summary Get a list of apps
 */
export const listApps = (
  projectId: string,
  params?: ListAppsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListApps>(
    { url: `/projects/${projectId}/apps`, method: "GET", params },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
 * @summary Create an App
 */
export const createApp = (
  projectId: string,
  appCreate: BodyType<AppCreate>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<App>(
    {
      url: `/projects/${projectId}/apps`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: appCreate,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
 * @summary Get an app
 */
export const getApp = (
  projectId: string,
  appId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<App>(
    { url: `/projects/${projectId}/apps/${appId}`, method: "GET" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
 * @summary Update an app
 */
export const updateApp = (
  projectId: string,
  appId: string,
  updateAppBody: BodyType<UpdateAppBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<App>(
    {
      url: `/projects/${projectId}/apps/${appId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateAppBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
 * @summary Delete an app
 */
export const deleteApp = (
  projectId: string,
  appId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<DeletedObject>(
    { url: `/projects/${projectId}/apps/${appId}`, method: "DELETE" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
 * @summary Get a list of customers
 */
export const listCustomers = (
  projectId: string,
  params?: ListCustomersParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListCustomers>(
    { url: `/projects/${projectId}/customers`, method: "GET", params },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
 * @summary Create a customer
 */
export const createCustomer = (
  projectId: string,
  createCustomerBody: BodyType<CreateCustomerBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Customer>(
    {
      url: `/projects/${projectId}/customers`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCustomerBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
 * @summary Get a customer
 */
export const getCustomer = (
  projectId: string,
  customerId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Customer>(
    { url: `/projects/${projectId}/customers/${customerId}`, method: "GET" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
 * @summary Delete a customer
 */
export const deleteCustomer = (
  projectId: string,
  customerId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<DeletedObject>(
    { url: `/projects/${projectId}/customers/${customerId}`, method: "DELETE" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:products:read</code>.
 * @summary Get a product
 */
export const getProduct = (
  projectId: string,
  productId: string,
  params?: GetProductParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Product>(
    {
      url: `/projects/${projectId}/products/${productId}`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
 * @summary Delete a product
 */
export const deleteProduct = (
  projectId: string,
  productId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<DeletedObject>(
    { url: `/projects/${projectId}/products/${productId}`, method: "DELETE" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:products:read</code>.
 * @summary Get a list of products
 */
export const listProducts = (
  projectId: string,
  params?: ListProductsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListProducts>(
    { url: `/projects/${projectId}/products`, method: "GET", params },
    options
  );
};

/**
 * <div class="theme-admonition theme-admonition-info alert alert--warning">
  <div class="heading">Warning</div>
  <div>This endpoint does not allow to create RevenueCat Billing products.</div>
This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
 * @summary Create a product
 */
export const createProduct = (
  projectId: string,
  createProductBody: BodyType<CreateProductBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Product>(
    {
      url: `/projects/${projectId}/products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createProductBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read</code>.
 * @summary Get an entitlement
 */
export const getEntitlement = (
  projectId: string,
  entitlementId: string,
  params?: GetEntitlementParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Entitlement>(
    {
      url: `/projects/${projectId}/entitlements/${entitlementId}`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read_write</code>.
 * @summary Update an entitlement
 */
export const updateEntitlement = (
  projectId: string,
  entitlementId: string,
  updateEntitlementBody: BodyType<UpdateEntitlementBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Entitlement>(
    {
      url: `/projects/${projectId}/entitlements/${entitlementId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateEntitlementBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read_write</code>.
 * @summary Delete an entitlement
 */
export const deleteEntitlement = (
  projectId: string,
  entitlementId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<DeletedObject>(
    {
      url: `/projects/${projectId}/entitlements/${entitlementId}`,
      method: "DELETE",
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read</code>.
 * @summary Get a list of entitlements
 */
export const listEntitlements = (
  projectId: string,
  params?: ListEntitlementsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListEntitlements>(
    { url: `/projects/${projectId}/entitlements`, method: "GET", params },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read_write</code>.
 * @summary Create an entitlement
 */
export const createEntitlement = (
  projectId: string,
  createEntitlementBody: BodyType<CreateEntitlementBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Entitlement>(
    {
      url: `/projects/${projectId}/entitlements`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEntitlementBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read</code>.
 * @summary Get a list of products attached to a given entitlement
 */
export const getProductsFromEntitlement = (
  projectId: string,
  entitlementId: string,
  params?: GetProductsFromEntitlementParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ProductsFromEntitlement>(
    {
      url: `/projects/${projectId}/entitlements/${entitlementId}/products`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read_write</code>.
 * @summary Attach a set of products to an entitlement
 */
export const attachProductsToEntitlement = (
  projectId: string,
  entitlementId: string,
  attachProductsToEntitlementBody: BodyType<AttachProductsToEntitlementBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Entitlement>(
    {
      url: `/projects/${projectId}/entitlements/${entitlementId}/actions/attach_products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: attachProductsToEntitlementBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:entitlements:read_write</code>.
 * @summary Detach a set of product from an entitlement
 */
export const detachProductsFromEntitlement = (
  projectId: string,
  entitlementId: string,
  detachProductsFromEntitlementBody: BodyType<DetachProductsFromEntitlementBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Entitlement>(
    {
      url: `/projects/${projectId}/entitlements/${entitlementId}/actions/detach_products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: detachProductsFromEntitlementBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:offerings:read</code>.
 * @summary Get an offering
 */
export const getOffering = (
  projectId: string,
  offeringId: string,
  params?: GetOfferingParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Offering>(
    {
      url: `/projects/${projectId}/offerings/${offeringId}`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
 * @summary Update an offering
 */
export const updateOffering = (
  projectId: string,
  offeringId: string,
  updateOfferingBody: BodyType<UpdateOfferingBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Offering>(
    {
      url: `/projects/${projectId}/offerings/${offeringId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateOfferingBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
 * @summary Delete an offering and its attached packages
 */
export const deleteOffering = (
  projectId: string,
  offeringId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<DeletedObject>(
    { url: `/projects/${projectId}/offerings/${offeringId}`, method: "DELETE" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:offerings:read</code>.
 * @summary Get a list of offerings
 */
export const listOfferings = (
  projectId: string,
  params?: ListOfferingsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListOfferings>(
    { url: `/projects/${projectId}/offerings`, method: "GET", params },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
 * @summary Create an offering
 */
export const createOffering = (
  projectId: string,
  createOfferingBody: BodyType<CreateOfferingBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Offering>(
    {
      url: `/projects/${projectId}/offerings`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createOfferingBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read</code>.
 * @summary Get a package
 */
export const getPackage = (
  projectId: string,
  packageId: string,
  params?: GetPackageParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Package>(
    {
      url: `/projects/${projectId}/packages/${packageId}`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read_write</code>.
 * @summary Update a package
 */
export const updatePackage = (
  projectId: string,
  packageId: string,
  updatePackageBody: BodyType<UpdatePackageBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Package>(
    {
      url: `/projects/${projectId}/packages/${packageId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updatePackageBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read_write</code>.
 * @summary Delete a package
 */
export const deletePackageFromOffering = (
  projectId: string,
  packageId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<DeletedObject>(
    { url: `/projects/${projectId}/packages/${packageId}`, method: "DELETE" },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read</code>.
 * @summary Get a list of packages in an offering
 */
export const listPackages = (
  projectId: string,
  offeringId: string,
  params?: ListPackagesParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListPackages>(
    {
      url: `/projects/${projectId}/offerings/${offeringId}/packages`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read_write</code>.
 * @summary Create a package
 */
export const createPackages = (
  projectId: string,
  offeringId: string,
  createPackagesBody: BodyType<CreatePackagesBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Package>(
    {
      url: `/projects/${projectId}/offerings/${offeringId}/packages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPackagesBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read</code>.
 * @summary Get a list of products attached to a given package of an offering
 */
export const getProductsFromPackage = (
  projectId: string,
  packageId: string,
  params?: GetProductsFromPackageParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ProductsFromPackage>(
    {
      url: `/projects/${projectId}/packages/${packageId}/products`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read_write</code>.
 * @summary Attach a set of products to a package
 */
export const attachProductsToPackage = (
  projectId: string,
  packageId: string,
  attachProductsToPackageBody: BodyType<AttachProductsToPackageBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Package>(
    {
      url: `/projects/${projectId}/packages/${packageId}/actions/attach_products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: attachProductsToPackageBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>project_configuration:packages:read_write</code>.
 * @summary Detach a set of products from a package
 */
export const detachProductsFromPackage = (
  projectId: string,
  packageId: string,
  detachProductsFromPackageBody: BodyType<DetachProductsFromPackageBody>,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Package>(
    {
      url: `/projects/${projectId}/packages/${packageId}/actions/detach_products`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: detachProductsFromPackageBody,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
 * @summary Get a subscription
 */
export const getSubscription = (
  projectId: string,
  subscriptionId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Subscription>(
    {
      url: `/projects/${projectId}/subscriptions/${subscriptionId}`,
      method: "GET",
    },
    options
  );
};

/**
 * Lists all Entitlements granted by a Subscription.
 This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
 * @summary Get a list of entitlements associated with a subscription
 */
export const listSubscriptionEntitlements = (
  projectId: string,
  subscriptionId: string,
  params?: ListSubscriptionEntitlementsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListEntitlements>(
    {
      url: `/projects/${projectId}/subscriptions/${subscriptionId}/entitlements`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * Cancel an active RevenueCat Billing subscription. The customer will lose access to the associated entitlements at the end of the current period.
 This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
 * @summary Cancel an active RevenueCat Billing subscription
 */
export const cancelSubscription = (
  projectId: string,
  subscriptionId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Subscription>(
    {
      url: `/projects/${projectId}/subscriptions/${subscriptionId}/actions/cancel`,
      method: "POST",
    },
    options
  );
};

/**
 * Cancel a RevenueCat Billing subscription by refunding the most recent payment. The customer will immediately lose access to the associated entitlements.
 This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
 * @summary Refund an active RevenueCat Billing subscription
 */
export const refundSubscription = (
  projectId: string,
  subscriptionId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Subscription>(
    {
      url: `/projects/${projectId}/subscriptions/${subscriptionId}/actions/refund`,
      method: "POST",
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
 * @summary Get a list of subscriptions associated with a customer
 */
export const listSubscriptions = (
  projectId: string,
  customerId: string,
  params?: ListSubscriptionsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListSubscriptions>(
    {
      url: `/projects/${projectId}/customers/${customerId}/subscriptions`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
 * @summary Get a purchase
 */
export const getPurchase = (
  projectId: string,
  purchaseId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Purchase>(
    { url: `/projects/${projectId}/purchases/${purchaseId}`, method: "GET" },
    options
  );
};

/**
 * Lists all Entitlements granted by a Purchase.
 This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
 * @summary Get a list of entitlements associated with a purchase
 */
export const listPurchaseEntitlements = (
  projectId: string,
  purchaseId: string,
  params?: ListPurchaseEntitlementsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListEntitlements>(
    {
      url: `/projects/${projectId}/purchases/${purchaseId}/entitlements`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * Refund a RevenueCat Billing purchase and revoke access to associated granted entitlements.
 This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
 * @summary Refund a RevenueCat Billing purchase
 */
export const refundPurchase = (
  projectId: string,
  purchaseId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<Purchase>(
    {
      url: `/projects/${projectId}/purchases/${purchaseId}/actions/refund`,
      method: "POST",
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
 * @summary Get a list of purchases associated with a customer
 */
export const listPurchases = (
  projectId: string,
  customerId: string,
  params?: ListPurchasesParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListPurchases>(
    {
      url: `/projects/${projectId}/customers/${customerId}/purchases`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
 * @summary Get a list of customer's active entitlements
 */
export const listCustomerActiveEntitlements = (
  projectId: string,
  customerId: string,
  params?: ListCustomerActiveEntitlementsParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListCustomerActiveEntitlements>(
    {
      url: `/projects/${projectId}/customers/${customerId}/active_entitlements`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
 * @summary Get a list of the customer's aliases
 */
export const listCustomerAliases = (
  projectId: string,
  customerId: string,
  params?: ListCustomerAliasesParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListCustomerAliases>(
    {
      url: `/projects/${projectId}/customers/${customerId}/aliases`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:invoices:read</code>.
 * @summary Get a list of the customer's invoices
 */
export const listCustomerInvoices = (
  projectId: string,
  customerId: string,
  params?: ListCustomerInvoicesParams,
  options?: SecondParameter<typeof instance>
) => {
  return instance<ListCustomerInvoices>(
    {
      url: `/projects/${projectId}/customers/${customerId}/invoices`,
      method: "GET",
      params,
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>customer_information:invoices:read</code>.
 * @summary Get an invoice
 */
export const getInvoice = (
  projectId: string,
  customerId: string,
  invoiceId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<unknown>(
    {
      url: `/projects/${projectId}/customers/${customerId}/invoices/${invoiceId}/file`,
      method: "GET",
    },
    options
  );
};

/**
 * This endpoint requires the following permission(s): <code>charts_metrics:overview:read</code>.
 * @summary Get overview metrics for a project
 */
export const getOverviewMetrics = (
  projectId: string,
  options?: SecondParameter<typeof instance>
) => {
  return instance<OverviewMetrics>(
    { url: `/projects/${projectId}/metrics/overview`, method: "GET" },
    options
  );
};

export type ListProjectsResult = NonNullable<
  Awaited<ReturnType<typeof listProjects>>
>;
export type ListAppsResult = NonNullable<Awaited<ReturnType<typeof listApps>>>;
export type CreateAppResult = NonNullable<
  Awaited<ReturnType<typeof createApp>>
>;
export type GetAppResult = NonNullable<Awaited<ReturnType<typeof getApp>>>;
export type UpdateAppResult = NonNullable<
  Awaited<ReturnType<typeof updateApp>>
>;
export type DeleteAppResult = NonNullable<
  Awaited<ReturnType<typeof deleteApp>>
>;
export type ListCustomersResult = NonNullable<
  Awaited<ReturnType<typeof listCustomers>>
>;
export type CreateCustomerResult = NonNullable<
  Awaited<ReturnType<typeof createCustomer>>
>;
export type GetCustomerResult = NonNullable<
  Awaited<ReturnType<typeof getCustomer>>
>;
export type DeleteCustomerResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomer>>
>;
export type GetProductResult = NonNullable<
  Awaited<ReturnType<typeof getProduct>>
>;
export type DeleteProductResult = NonNullable<
  Awaited<ReturnType<typeof deleteProduct>>
>;
export type ListProductsResult = NonNullable<
  Awaited<ReturnType<typeof listProducts>>
>;
export type CreateProductResult = NonNullable<
  Awaited<ReturnType<typeof createProduct>>
>;
export type GetEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof getEntitlement>>
>;
export type UpdateEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof updateEntitlement>>
>;
export type DeleteEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof deleteEntitlement>>
>;
export type ListEntitlementsResult = NonNullable<
  Awaited<ReturnType<typeof listEntitlements>>
>;
export type CreateEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof createEntitlement>>
>;
export type GetProductsFromEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof getProductsFromEntitlement>>
>;
export type AttachProductsToEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof attachProductsToEntitlement>>
>;
export type DetachProductsFromEntitlementResult = NonNullable<
  Awaited<ReturnType<typeof detachProductsFromEntitlement>>
>;
export type GetOfferingResult = NonNullable<
  Awaited<ReturnType<typeof getOffering>>
>;
export type UpdateOfferingResult = NonNullable<
  Awaited<ReturnType<typeof updateOffering>>
>;
export type DeleteOfferingResult = NonNullable<
  Awaited<ReturnType<typeof deleteOffering>>
>;
export type ListOfferingsResult = NonNullable<
  Awaited<ReturnType<typeof listOfferings>>
>;
export type CreateOfferingResult = NonNullable<
  Awaited<ReturnType<typeof createOffering>>
>;
export type GetPackageResult = NonNullable<
  Awaited<ReturnType<typeof getPackage>>
>;
export type UpdatePackageResult = NonNullable<
  Awaited<ReturnType<typeof updatePackage>>
>;
export type DeletePackageFromOfferingResult = NonNullable<
  Awaited<ReturnType<typeof deletePackageFromOffering>>
>;
export type ListPackagesResult = NonNullable<
  Awaited<ReturnType<typeof listPackages>>
>;
export type CreatePackagesResult = NonNullable<
  Awaited<ReturnType<typeof createPackages>>
>;
export type GetProductsFromPackageResult = NonNullable<
  Awaited<ReturnType<typeof getProductsFromPackage>>
>;
export type AttachProductsToPackageResult = NonNullable<
  Awaited<ReturnType<typeof attachProductsToPackage>>
>;
export type DetachProductsFromPackageResult = NonNullable<
  Awaited<ReturnType<typeof detachProductsFromPackage>>
>;
export type GetSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof getSubscription>>
>;
export type ListSubscriptionEntitlementsResult = NonNullable<
  Awaited<ReturnType<typeof listSubscriptionEntitlements>>
>;
export type CancelSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof cancelSubscription>>
>;
export type RefundSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof refundSubscription>>
>;
export type ListSubscriptionsResult = NonNullable<
  Awaited<ReturnType<typeof listSubscriptions>>
>;
export type GetPurchaseResult = NonNullable<
  Awaited<ReturnType<typeof getPurchase>>
>;
export type ListPurchaseEntitlementsResult = NonNullable<
  Awaited<ReturnType<typeof listPurchaseEntitlements>>
>;
export type RefundPurchaseResult = NonNullable<
  Awaited<ReturnType<typeof refundPurchase>>
>;
export type ListPurchasesResult = NonNullable<
  Awaited<ReturnType<typeof listPurchases>>
>;
export type ListCustomerActiveEntitlementsResult = NonNullable<
  Awaited<ReturnType<typeof listCustomerActiveEntitlements>>
>;
export type ListCustomerAliasesResult = NonNullable<
  Awaited<ReturnType<typeof listCustomerAliases>>
>;
export type ListCustomerInvoicesResult = NonNullable<
  Awaited<ReturnType<typeof listCustomerInvoices>>
>;
export type GetInvoiceResult = NonNullable<
  Awaited<ReturnType<typeof getInvoice>>
>;
export type GetOverviewMetricsResult = NonNullable<
  Awaited<ReturnType<typeof getOverviewMetrics>>
>;
