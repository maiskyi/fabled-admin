# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Feedback {
  id: ID!
  firebaseUserId: String
  email: String
  rating: Int
  comment: String
  createdAt: DateTime
}

input FeedbackWhereUniqueInput {
  id: ID
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  id: IDFilter
  firebaseUserId: StringFilter
  email: StringFilter
  rating: IntFilter
  comment: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FeedbackOrderByInput {
  id: OrderDirection
  firebaseUserId: OrderDirection
  email: OrderDirection
  rating: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
}

input FeedbackUpdateInput {
  firebaseUserId: String
  email: String
  rating: Int
  comment: String
  createdAt: DateTime
}

input FeedbackUpdateArgs {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateInput!
}

input FeedbackCreateInput {
  firebaseUserId: String
  email: String
  rating: Int
  comment: String
  createdAt: DateTime
}

type Story {
  id: ID!
  firebaseUserId: String
  deviceId: String
  parent: Story
  prompt: Prompt
  character: Character
  placeOfEvent: PlaceOfEvent
  moralLesson: MoralLesson
  childName: String
  childAge: Int
  childGender: StoryChildGenderType
  title: String
  content: String
  image: CloudinaryImage_File
  readTime: Int
  status: StoryStatusType
  statusLog: [StoryStatusLogType!]
  contentPrompt: String
  imagePrompt: String
  message: String
  createdAt: DateTime
}

enum StoryChildGenderType {
  boy
  girl
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

enum StoryStatusType {
  inprogress
  success
  failed
}

enum StoryStatusLogType {
  initialized
  contentInProgress
  imageInProgress
  success
  createStoryRequestFailed
  storyContentGenerationFailed
  storyContentGenerationFailedWithNoResult
  storyGenerationFailed
  storyImageGenerationFailed
  storyImageGenerationFailedWithNoResult
  storyImageUploadFailed
  storyImageUploadingToCloudinaryFailed
}

input StoryWhereUniqueInput {
  id: ID
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: IDFilter
  firebaseUserId: StringFilter
  deviceId: StringFilter
  parent: StoryWhereInput
  prompt: PromptWhereInput
  character: CharacterWhereInput
  placeOfEvent: PlaceOfEventWhereInput
  moralLesson: MoralLessonWhereInput
  childName: StringFilter
  childAge: IntNullableFilter
  childGender: StoryChildGenderTypeNullableFilter
  title: StringFilter
  content: StringFilter
  readTime: IntFilter
  status: StoryStatusTypeNullableFilter
  contentPrompt: StringFilter
  imagePrompt: StringFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StoryChildGenderTypeNullableFilter {
  equals: StoryChildGenderType
  in: [StoryChildGenderType!]
  notIn: [StoryChildGenderType!]
  not: StoryChildGenderTypeNullableFilter
}

input StoryStatusTypeNullableFilter {
  equals: StoryStatusType
  in: [StoryStatusType!]
  notIn: [StoryStatusType!]
  not: StoryStatusTypeNullableFilter
}

input StoryOrderByInput {
  id: OrderDirection
  firebaseUserId: OrderDirection
  deviceId: OrderDirection
  childName: OrderDirection
  childAge: OrderDirection
  childGender: OrderDirection
  title: OrderDirection
  content: OrderDirection
  readTime: OrderDirection
  status: OrderDirection
  contentPrompt: OrderDirection
  imagePrompt: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input StoryUpdateInput {
  firebaseUserId: String
  deviceId: String
  parent: StoryRelateToOneForUpdateInput
  prompt: PromptRelateToOneForUpdateInput
  character: CharacterRelateToOneForUpdateInput
  placeOfEvent: PlaceOfEventRelateToOneForUpdateInput
  moralLesson: MoralLessonRelateToOneForUpdateInput
  childName: String
  childAge: Int
  childGender: StoryChildGenderType
  title: String
  content: String
  image: Upload
  readTime: Int
  status: StoryStatusType
  statusLog: [StoryStatusLogType!]
  contentPrompt: String
  imagePrompt: String
  message: String
  createdAt: DateTime
}

input StoryRelateToOneForUpdateInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
  disconnect: Boolean
}

input PromptRelateToOneForUpdateInput {
  create: PromptCreateInput
  connect: PromptWhereUniqueInput
  disconnect: Boolean
}

input CharacterRelateToOneForUpdateInput {
  create: CharacterCreateInput
  connect: CharacterWhereUniqueInput
  disconnect: Boolean
}

input PlaceOfEventRelateToOneForUpdateInput {
  create: PlaceOfEventCreateInput
  connect: PlaceOfEventWhereUniqueInput
  disconnect: Boolean
}

input MoralLessonRelateToOneForUpdateInput {
  create: MoralLessonCreateInput
  connect: MoralLessonWhereUniqueInput
  disconnect: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input StoryUpdateArgs {
  where: StoryWhereUniqueInput!
  data: StoryUpdateInput!
}

input StoryCreateInput {
  firebaseUserId: String
  deviceId: String
  parent: StoryRelateToOneForCreateInput
  prompt: PromptRelateToOneForCreateInput
  character: CharacterRelateToOneForCreateInput
  placeOfEvent: PlaceOfEventRelateToOneForCreateInput
  moralLesson: MoralLessonRelateToOneForCreateInput
  childName: String
  childAge: Int
  childGender: StoryChildGenderType
  title: String
  content: String
  image: Upload
  readTime: Int
  status: StoryStatusType
  statusLog: [StoryStatusLogType!]
  contentPrompt: String
  imagePrompt: String
  message: String
  createdAt: DateTime
}

input StoryRelateToOneForCreateInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
}

input PromptRelateToOneForCreateInput {
  create: PromptCreateInput
  connect: PromptWhereUniqueInput
}

input CharacterRelateToOneForCreateInput {
  create: CharacterCreateInput
  connect: CharacterWhereUniqueInput
}

input PlaceOfEventRelateToOneForCreateInput {
  create: PlaceOfEventCreateInput
  connect: PlaceOfEventWhereUniqueInput
}

input MoralLessonRelateToOneForCreateInput {
  create: MoralLessonCreateInput
  connect: MoralLessonWhereUniqueInput
}

type Inquiry {
  id: ID!
  email: String
  subject: String
  message: String
  createdAt: DateTime
}

input InquiryWhereUniqueInput {
  id: ID
}

input InquiryWhereInput {
  AND: [InquiryWhereInput!]
  OR: [InquiryWhereInput!]
  NOT: [InquiryWhereInput!]
  id: IDFilter
  email: StringFilter
  subject: StringFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
}

input InquiryOrderByInput {
  id: OrderDirection
  email: OrderDirection
  subject: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input InquiryUpdateInput {
  email: String
  subject: String
  message: String
  createdAt: DateTime
}

input InquiryUpdateArgs {
  where: InquiryWhereUniqueInput!
  data: InquiryUpdateInput!
}

input InquiryCreateInput {
  email: String
  subject: String
  message: String
  createdAt: DateTime
}

type Character {
  id: ID!
  title: String
  emoji: String
  description: String
  image: CloudinaryImage_File
  language: CharacterLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

enum CharacterLanguageType {
  en
}

input CharacterWhereUniqueInput {
  id: ID
}

input CharacterWhereInput {
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  language: CharacterLanguageTypeNullableFilter
  isPublished: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input CharacterLanguageTypeNullableFilter {
  equals: CharacterLanguageType
  in: [CharacterLanguageType!]
  notIn: [CharacterLanguageType!]
  not: CharacterLanguageTypeNullableFilter
}

input CharacterOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  language: OrderDirection
  isPublished: OrderDirection
  createdAt: OrderDirection
}

input CharacterUpdateInput {
  title: String
  emoji: String
  description: String
  image: Upload
  language: CharacterLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

input CharacterUpdateArgs {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateInput!
}

input CharacterCreateInput {
  title: String
  emoji: String
  description: String
  image: Upload
  language: CharacterLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

type MoralLesson {
  id: ID!
  title: String
  emoji: String
  description: String
  language: MoralLessonLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

enum MoralLessonLanguageType {
  en
}

input MoralLessonWhereUniqueInput {
  id: ID
}

input MoralLessonWhereInput {
  AND: [MoralLessonWhereInput!]
  OR: [MoralLessonWhereInput!]
  NOT: [MoralLessonWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  language: MoralLessonLanguageTypeNullableFilter
  isPublished: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input MoralLessonLanguageTypeNullableFilter {
  equals: MoralLessonLanguageType
  in: [MoralLessonLanguageType!]
  notIn: [MoralLessonLanguageType!]
  not: MoralLessonLanguageTypeNullableFilter
}

input MoralLessonOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  language: OrderDirection
  isPublished: OrderDirection
  createdAt: OrderDirection
}

input MoralLessonUpdateInput {
  title: String
  emoji: String
  description: String
  language: MoralLessonLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

input MoralLessonUpdateArgs {
  where: MoralLessonWhereUniqueInput!
  data: MoralLessonUpdateInput!
}

input MoralLessonCreateInput {
  title: String
  emoji: String
  description: String
  language: MoralLessonLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

type PlaceOfEvent {
  id: ID!
  title: String
  emoji: String
  image: CloudinaryImage_File
  prompt: Prompt
  language: PlaceOfEventLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

enum PlaceOfEventLanguageType {
  en
}

input PlaceOfEventWhereUniqueInput {
  id: ID
}

input PlaceOfEventWhereInput {
  AND: [PlaceOfEventWhereInput!]
  OR: [PlaceOfEventWhereInput!]
  NOT: [PlaceOfEventWhereInput!]
  id: IDFilter
  title: StringFilter
  prompt: PromptWhereInput
  language: PlaceOfEventLanguageTypeNullableFilter
  isPublished: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input PlaceOfEventLanguageTypeNullableFilter {
  equals: PlaceOfEventLanguageType
  in: [PlaceOfEventLanguageType!]
  notIn: [PlaceOfEventLanguageType!]
  not: PlaceOfEventLanguageTypeNullableFilter
}

input PlaceOfEventOrderByInput {
  id: OrderDirection
  title: OrderDirection
  language: OrderDirection
  isPublished: OrderDirection
  createdAt: OrderDirection
}

input PlaceOfEventUpdateInput {
  title: String
  emoji: String
  image: Upload
  prompt: PromptRelateToOneForUpdateInput
  language: PlaceOfEventLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

input PlaceOfEventUpdateArgs {
  where: PlaceOfEventWhereUniqueInput!
  data: PlaceOfEventUpdateInput!
}

input PlaceOfEventCreateInput {
  title: String
  emoji: String
  image: Upload
  prompt: PromptRelateToOneForCreateInput
  language: PlaceOfEventLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

type Prompt {
  id: ID!
  title: String
  message: String
  textPrompt: String
  imagePrompt: String
  language: PromptLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

enum PromptLanguageType {
  en
}

input PromptWhereUniqueInput {
  id: ID
}

input PromptWhereInput {
  AND: [PromptWhereInput!]
  OR: [PromptWhereInput!]
  NOT: [PromptWhereInput!]
  id: IDFilter
  title: StringFilter
  message: StringFilter
  textPrompt: StringFilter
  imagePrompt: StringFilter
  language: PromptLanguageTypeNullableFilter
  isPublished: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input PromptLanguageTypeNullableFilter {
  equals: PromptLanguageType
  in: [PromptLanguageType!]
  notIn: [PromptLanguageType!]
  not: PromptLanguageTypeNullableFilter
}

input PromptOrderByInput {
  id: OrderDirection
  title: OrderDirection
  message: OrderDirection
  textPrompt: OrderDirection
  imagePrompt: OrderDirection
  language: OrderDirection
  isPublished: OrderDirection
  createdAt: OrderDirection
}

input PromptUpdateInput {
  title: String
  message: String
  textPrompt: String
  imagePrompt: String
  language: PromptLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

input PromptUpdateArgs {
  where: PromptWhereUniqueInput!
  data: PromptUpdateInput!
}

input PromptCreateInput {
  title: String
  message: String
  textPrompt: String
  imagePrompt: String
  language: PromptLanguageType
  isPublished: Boolean
  createdAt: DateTime
}

type Lullaby {
  id: ID!
  title: String
  mp3: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input LullabyWhereUniqueInput {
  id: ID
}

input LullabyWhereInput {
  AND: [LullabyWhereInput!]
  OR: [LullabyWhereInput!]
  NOT: [LullabyWhereInput!]
  id: IDFilter
  title: StringFilter
}

input LullabyOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input LullabyUpdateInput {
  title: String
  mp3: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

input LullabyUpdateArgs {
  where: LullabyWhereUniqueInput!
  data: LullabyUpdateInput!
}

input LullabyCreateInput {
  title: String
  mp3: FileFieldInput
}

type Config {
  id: ID!
  privacyPolicyUrl: String
  termsAndConditionsUrl: String
}

input ConfigWhereUniqueInput {
  id: ID
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  privacyPolicyUrl: StringFilter
  termsAndConditionsUrl: StringFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  privacyPolicyUrl: OrderDirection
  termsAndConditionsUrl: OrderDirection
}

input ConfigUpdateInput {
  privacyPolicyUrl: String
  termsAndConditionsUrl: String
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput! = {id: 1}
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  privacyPolicyUrl: String
  termsAndConditionsUrl: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFeedback(data: FeedbackCreateInput!): Feedback
  createFeedbacks(data: [FeedbackCreateInput!]!): [Feedback]
  updateFeedback(where: FeedbackWhereUniqueInput!, data: FeedbackUpdateInput!): Feedback
  updateFeedbacks(data: [FeedbackUpdateArgs!]!): [Feedback]
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteFeedbacks(where: [FeedbackWhereUniqueInput!]!): [Feedback]
  createStory(data: StoryCreateInput!): Story
  createStories(data: [StoryCreateInput!]!): [Story]
  updateStory(where: StoryWhereUniqueInput!, data: StoryUpdateInput!): Story
  updateStories(data: [StoryUpdateArgs!]!): [Story]
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteStories(where: [StoryWhereUniqueInput!]!): [Story]
  createInquiry(data: InquiryCreateInput!): Inquiry
  createInquiries(data: [InquiryCreateInput!]!): [Inquiry]
  updateInquiry(where: InquiryWhereUniqueInput!, data: InquiryUpdateInput!): Inquiry
  updateInquiries(data: [InquiryUpdateArgs!]!): [Inquiry]
  deleteInquiry(where: InquiryWhereUniqueInput!): Inquiry
  deleteInquiries(where: [InquiryWhereUniqueInput!]!): [Inquiry]
  createCharacter(data: CharacterCreateInput!): Character
  createCharacters(data: [CharacterCreateInput!]!): [Character]
  updateCharacter(where: CharacterWhereUniqueInput!, data: CharacterUpdateInput!): Character
  updateCharacters(data: [CharacterUpdateArgs!]!): [Character]
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteCharacters(where: [CharacterWhereUniqueInput!]!): [Character]
  createMoralLesson(data: MoralLessonCreateInput!): MoralLesson
  createMoralLessons(data: [MoralLessonCreateInput!]!): [MoralLesson]
  updateMoralLesson(where: MoralLessonWhereUniqueInput!, data: MoralLessonUpdateInput!): MoralLesson
  updateMoralLessons(data: [MoralLessonUpdateArgs!]!): [MoralLesson]
  deleteMoralLesson(where: MoralLessonWhereUniqueInput!): MoralLesson
  deleteMoralLessons(where: [MoralLessonWhereUniqueInput!]!): [MoralLesson]
  createPlaceOfEvent(data: PlaceOfEventCreateInput!): PlaceOfEvent
  createPlaceOfEvents(data: [PlaceOfEventCreateInput!]!): [PlaceOfEvent]
  updatePlaceOfEvent(where: PlaceOfEventWhereUniqueInput!, data: PlaceOfEventUpdateInput!): PlaceOfEvent
  updatePlaceOfEvents(data: [PlaceOfEventUpdateArgs!]!): [PlaceOfEvent]
  deletePlaceOfEvent(where: PlaceOfEventWhereUniqueInput!): PlaceOfEvent
  deletePlaceOfEvents(where: [PlaceOfEventWhereUniqueInput!]!): [PlaceOfEvent]
  createPrompt(data: PromptCreateInput!): Prompt
  createPrompts(data: [PromptCreateInput!]!): [Prompt]
  updatePrompt(where: PromptWhereUniqueInput!, data: PromptUpdateInput!): Prompt
  updatePrompts(data: [PromptUpdateArgs!]!): [Prompt]
  deletePrompt(where: PromptWhereUniqueInput!): Prompt
  deletePrompts(where: [PromptWhereUniqueInput!]!): [Prompt]
  createLullaby(data: LullabyCreateInput!): Lullaby
  createLullabies(data: [LullabyCreateInput!]!): [Lullaby]
  updateLullaby(where: LullabyWhereUniqueInput!, data: LullabyUpdateInput!): Lullaby
  updateLullabies(data: [LullabyUpdateArgs!]!): [Lullaby]
  deleteLullaby(where: LullabyWhereUniqueInput!): Lullaby
  deleteLullabies(where: [LullabyWhereUniqueInput!]!): [Lullaby]
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput! = {id: 1}, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput! = {id: 1}): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput! = {}, orderBy: [FeedbackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackWhereUniqueInput): [Feedback!]
  feedbacksCount(where: FeedbackWhereInput! = {}): Int
  story(where: StoryWhereUniqueInput!): Story
  stories(where: StoryWhereInput! = {}, orderBy: [StoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoryWhereUniqueInput): [Story!]
  storiesCount(where: StoryWhereInput! = {}): Int
  inquiry(where: InquiryWhereUniqueInput!): Inquiry
  inquiries(where: InquiryWhereInput! = {}, orderBy: [InquiryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InquiryWhereUniqueInput): [Inquiry!]
  inquiriesCount(where: InquiryWhereInput! = {}): Int
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput! = {}, orderBy: [CharacterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CharacterWhereUniqueInput): [Character!]
  charactersCount(where: CharacterWhereInput! = {}): Int
  moralLesson(where: MoralLessonWhereUniqueInput!): MoralLesson
  moralLessons(where: MoralLessonWhereInput! = {}, orderBy: [MoralLessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MoralLessonWhereUniqueInput): [MoralLesson!]
  moralLessonsCount(where: MoralLessonWhereInput! = {}): Int
  placeOfEvent(where: PlaceOfEventWhereUniqueInput!): PlaceOfEvent
  placeOfEvents(where: PlaceOfEventWhereInput! = {}, orderBy: [PlaceOfEventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlaceOfEventWhereUniqueInput): [PlaceOfEvent!]
  placeOfEventsCount(where: PlaceOfEventWhereInput! = {}): Int
  prompt(where: PromptWhereUniqueInput!): Prompt
  prompts(where: PromptWhereInput! = {}, orderBy: [PromptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PromptWhereUniqueInput): [Prompt!]
  promptsCount(where: PromptWhereInput! = {}): Int
  lullaby(where: LullabyWhereUniqueInput!): Lullaby
  lullabies(where: LullabyWhereInput! = {}, orderBy: [LullabyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LullabyWhereUniqueInput): [Lullaby!]
  lullabiesCount(where: LullabyWhereInput! = {}): Int
  config(where: ConfigWhereUniqueInput! = {id: 1}): Config
  configs(where: ConfigWhereInput! = {id: {equals: 1}}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  configsCount(where: ConfigWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
